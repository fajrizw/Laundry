
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\DetailTransaksi;
use App\DataTables\TransaksiDataTable;

class DetailTransaksiController extends Controller
{
    public function index(TransaksiDataTable $dataTable)
    {
        return $dataTable->render("table_master.transaksi.index");
    }

    public function create(){
        return view("table_master.detail_transaksi.create");
    }

    public function store(Request $request){
        $detail_transaksi = new DetailTransaksi();
        $detail_transaksi ->id_transaksi = $request->id_transaksi;
        $detail_transaksi ->id_paket = $request->id_paket;
        $detail_transaksi ->qty = $request->qty;
        $detail_transaksi ->keterangan = $request->keterangan;
        $detail_transaksi->save();

        return redirect()->route("transaksi.index")->with("message", [
            "message" => "Berhasil membuat transaksi",
            "type" => "success"
        ]);
    }

    public function update(Request $request, $id)
    {
        $detail_transaksi = DetailTransaksi::find($id);
        $detail_transaksi ->id_transaksi = $request->id_transaksi;
        $detail_transaksi ->id_paket = $request->id_paket;
        $detail_transaksi ->qty = $request->qty;
        $detail_transaksi ->keterangan = $request->keterangan;
        $detail_transaksi->update();

        return redirect()->route("transaksi.index")->with("message", [
            "message" => "Berhasil mengedit detail transaksi",
            "type" => "success"
        ]);
    }

    public function edit($id)
    {
        $detail_transaksi = DetailTransaksi::find($id);
        return view("table_master.detail_transaksi.edit", [
           "transaksi" => $transaksi
        ]);
    }


    public function destroy($id)
    {
        $detail_transaksi = DetailTransaksi::findorFail($id);
        $detail_transaksi->delete();

        return redirect()->back()->with("message", [
            "message" => "Berhasil menghapus detail transaksi",
            "type" => "success"
        ]);
    }
}



<div class="col-md-6">
<div class="form-group">
    <label>Voucher</label>
    <select class="js-example-basic-single w-100 form-control" name="id_voucher">
        <?php $vouchers = \App\Models\Voucher::select('nama')->distinct()->get()?>
        @forelse ($vouchers as $voucher)
        <option value="{{ $voucher->id }}">{{Str::ucfirst( $voucher->nama ) }}</option>
        @empty
        <option value="" disabled selected>Tidak ada data nama voucher</option>
        @endforelse
    </select>
</div>
</div>





namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use App\Models\Paket;
use App\Models\Transaksi;
class DetailTransaksi extends Model
{
    use HasFactory;

    protected $table = "detail_transaksi";

    protected $fillable = [
        "id_transaksi",
        "id_paket",
        "qty",
        "keterangan"
    ];

    public function transaksi(): BelongsTo {
        return $this->belongsTo(User::class, 'id_transaksi', 'id');
    }

    public function paket(): BelongsTo {
        return $this->belongsTo(User::class, 'id_paket', 'id');
    }
}




var labels =  {{ Js::from($labels) }};
var users =  {{ Js::from($data) }};

const data = {
  labels: labels,
  datasets: [{
    label: 'My First dataset',
    backgroundColor: 'rgb(255, 99, 132)',
    borderColor: 'rgb(255, 99, 132)',
    data: users,

  }]

};



const config = {
  type: 'line',
  data: data,
  options: {}

};



const myChart = new Chart(
  document.getElementById('myChart'),
  config

);

series: [{
            name: 'Belum diproses',
            data: result.data.map(each => {
              return each[Object.keys(each)[0]]["Belum diproses"]
            })
          }, {
            name: 'Sedang diproses',
            data: result.data.map(each => {
              return each[Object.keys(each)[0]]["Sedang diproses"]
            })
          }, {
            name: 'Ditolak',
            data: result.data.map(each => {
              return each[Object.keys(each)[0]]["Ditolak"]
            })
          }, {
            name: 'Selesai',
            data: result.data.map(each => {
              return each[Object.keys(each)[0]]["Selesai"]
            })
          }]
